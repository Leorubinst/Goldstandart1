import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os

API_TOKEN = os.getenv("BOT_TOKEN", "7216222305:AAFGz_GZFhZtlgZMpkO69Unv-zrktXLd4u0")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

user_states = {}

start_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
start_keyboard.add(KeyboardButton("–î–∞"))

oracle_answers = [
    "‚úÖ *–î–∞, —ç—Ç–æ —Å–ª—É—á–∏—Ç—Å—è!*",
    "‚ùå *–ù–µ—Ç, —ç—Ç–æ–º—É –Ω–µ –±—ã–≤–∞—Ç—å!*",
    "üå´Ô∏è *–¢—É–º–∞–Ω –æ–∫—É—Ç–∞–ª –ò–µ—Ä—É—Å–∞–ª–∏–º... –°–≤–µ—Ç —Å–µ—Ä–¥—Ü–∞ —Ç–≤–æ–µ–≥–æ –ø–æ–∫–∞–∂–µ—Ç –≤–µ—Ä–Ω—ã–π –ø—É—Ç—å! –°—Ç—É–ø–∞–π!*"
]

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üîÆ *–û—Ä–∞–∫—É–ª –∏–∑ –ò–µ—Ä—É—Å–∞–ª–∏–º–∞ –ø—Ä–æ–±—É–¥–∏–ª—Å—è...*", parse_mode="Markdown")
    await asyncio.sleep(1.5)
    await message.answer("üïØÔ∏è –Ø –≤–∏–∂—É –±—É–¥—É—â–µ–µ —Å–∫–≤–æ–∑—å –ø–µ—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–∏...", parse_mode="Markdown")
    await asyncio.sleep(1.5)
    await message.answer("üìú –ò –ø—Ä–µ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –µ–≥–æ... *–µ—Å–ª–∏ –æ—Å–º–µ–ª–∏—à—å—Å—è —Å–ø—Ä–æ—Å–∏—Ç—å.*\n\n–ù–∞—á–Ω–µ–º?", parse_mode="Markdown", reply_markup=start_keyboard)
    user_states[message.from_user.id] = {"step": "awaiting_start"}

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("step") == "awaiting_start" and msg.text == "–î–∞")
async def ask_name(message: types.Message):
    await message.answer("üìõ –ù–∞–∑–æ–≤–∏ —Å–µ–±—è, —Å—Ç—Ä–∞–Ω–Ω–∏–∫.\n*–ö–∞–∫ –∏–º—è —Ç–≤–æ—ë, —á—Ç–æ –≤–ø–∏—Å–∞–Ω–æ –≤ –ö–Ω–∏–≥—É –í—Ä–µ–º–µ–Ω?*", parse_mode="Markdown", reply_markup=types.ReplyKeyboardRemove())
    user_states[message.from_user.id]["step"] = "awaiting_name"

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("step") == "awaiting_name")
async def ask_event(message: types.Message):
    user_states[message.from_user.id]["name"] = message.text
    await message.answer(f"üñãÔ∏è *{message.text}...* –î–∞, –ø–æ–º–Ω—é —ç—Ç–æ –∏–º—è, –æ–Ω–æ –∑–≤—É—á–∞–ª–æ –≤ –≤–µ–∫–∞—Ö.", parse_mode="Markdown")
    await asyncio.sleep(1.5)
    await message.answer("‚úâÔ∏è –í–≤–µ–¥–∏ —Ç–µ–ø–µ—Ä—å —Å–æ–±—ã—Ç–∏–µ, —á—Ç–æ —Ç—Ä–µ–≤–æ–∂–∏—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ.", parse_mode="Markdown")
    user_states[message.from_user.id]["step"] = "awaiting_event"

@dp.message_handler(lambda msg: user_states.get(msg.from_user.id, {}).get("step") == "awaiting_event")
async def reveal_prophecy(message: types.Message):
    await message.answer("üåÄ *–Ø –≤–∑—ã–≤–∞—é –∫ –∑–≤—ë–∑–¥–∞–º... –ü—Ä–æ–Ω–∏–∫–∞—é –≤ –∑–∞–≤–µ—Å—É —Å—É–¥–µ–±...*", parse_mode="Markdown")
    await asyncio.sleep(2)
    prophecy = random.choice(oracle_answers)
    await message.answer(f"üîî *–û—Ä–∞–∫—É–ª –≤–µ—â–∞–µ—Ç:*\n\n{prophecy}", parse_mode="Markdown")
    user_states.pop(message.from_user.id, None)

async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())


